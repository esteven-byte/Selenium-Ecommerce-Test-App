{"name": "test_login_none_existing_user", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_login_negative.TestLoginNegative object at 0x000001F326AF7350>\n\n    @pytest.mark.tcid12\n    def test_login_none_existing_user(self):\n        my_account = MyAccountSignedOut(self.driver)\n        # go to my account\n        # assert my_account == 'yeah', 'my account does not match'\n        my_account.go_to_my_account()\n        # type username\n        random_email = email_password().get('email')\n        my_account.input_login_username(random_email)\n        # type password\n        my_account.input_login_password('100%real')\n        # click login\n        my_account.click_login_button()\n        # verify error message\n        msg_error = f'Unknowns email address. Check again or try your username.'\n>       my_account.wait_until_error_is_displayed(msg_error)\n\nssqatest\\tests\\my_account\\test_login_negative.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nssqatest\\src\\pages\\MyAccountSignedOut.py:35: in wait_until_error_is_displayed\n    return self.sl.wait_until_element_text(self.WOO_ERROR, exp_err)\nssqatest\\src\\SeleniumExtended.py:35: in wait_until_element_text\n    tx = WebDriverWait(self.driver, timeout).until(EC.text_to_be_present_in_element(locator, text))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c773d93e-d992-4aee-8a96-dfa0796651c8\")>\nmethod = <function text_to_be_present_in_element.<locals>._predicate at 0x000001F326B15C60>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvnvssqa\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException"}, "attachments": [{"name": "screenshot", "source": "111751eb-252e-4148-bf1e-e97376b8efb0-attachment.png", "type": "image/png"}], "start": 1681669729279, "stop": 1681669750506, "uuid": "bd022d02-551e-44f4-9a2e-564d8feb4290", "historyId": "cbf61d2f415822fee0e8b9c2dc99aeaf", "testCaseId": "d7fbd2d3f3df8b95fbce33bd529d007f", "fullName": "ssqatest.tests.my_account.test_login_negative.TestLoginNegative#test_login_none_existing_user", "labels": [{"name": "tag", "value": "tcid12"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "parentSuite", "value": "ssqatest.tests.my_account"}, {"name": "suite", "value": "test_login_negative"}, {"name": "subSuite", "value": "TestLoginNegative"}, {"name": "host", "value": "DESKTOP-TEFBRAB"}, {"name": "thread", "value": "8572-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ssqatest.tests.my_account.test_login_negative"}]}